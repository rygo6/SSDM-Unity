#pragma kernel FirstMip
#pragma kernel SubsequentMip

int _MipIndex;
float _SizeX;
float _SizeY;
float _TexelSizeX;
float _TexelSizeY;
float4x4 invVP_ClipToWorld;
float4x4 VP_WorldToClip;
float4x4 invV_ObjectToWorld;
float4x4 V_WorldToObject;
Texture2D<float4> _WorldPosSampler;
Texture2D<float4> _ResultSampler;
SamplerState linearClampSampler;
SamplerState pointClampSampler;
RWTexture2D<float4> _Result;

// static const float2 offsets[4] = {
//     float2(0, 0),
//     float2(1, 1),
//     float2(1, 0),
//     float2(0, 1)
// };
static const float2 offsets[4] = {
    float2(-1, -1),
    float2(1, 1),
    float2(1, -1),
    float2(-1, 1)
};

inline float2 AverageDisplacedUV(float2 uv, float2 texelSize, int mipIndex)
{
    float2 halfTexelSize = texelSize * 0.5;
    uv += halfTexelSize;
    const int sampleCount = 4;
    float2 averagedDisplacedNormalVector = 0;
    for (int i = 0; i < sampleCount; ++i)
    {
        const float2 sampleUv = uv + (offsets[i] * halfTexelSize);
        // const float2 sampleUv = uv;
        // const float4 displaceNormalVector = _WorldPosSampler.SampleLevel(linearClampSampler, sampleUv, 0); // seems better with lowest mip?
        const float4 displaceNormalVector = _WorldPosSampler.SampleLevel(linearClampSampler, sampleUv, mipIndex);
        averagedDisplacedNormalVector += displaceNormalVector.xy;
    }
    averagedDisplacedNormalVector /= sampleCount;
    
    return averagedDisplacedNormalVector;
}

[numthreads(32, 32, 1)]
void FirstMip (uint3 id : SV_DispatchThreadID)
{
    float2 uv = (float2)id.xy / float2(_SizeX, _SizeY);
    float2 texelSize = float2(_TexelSizeX, _TexelSizeY);
    
    float2 averageDisplacedUV = AverageDisplacedUV(uv, texelSize, _MipIndex);

    // float2 averageDisplacedUV = _WorldPosSampler.SampleLevel(linearClampSampler, uv, _MipIndex);
    
    _Result[id.xy] = float4(averageDisplacedUV.xy, 0, 1);
}

[numthreads(32, 32, 1)]
void SubsequentMip(uint3 id : SV_DispatchThreadID)
{
    float2 uv = (float2)id.xy / float2(_SizeX, _SizeY);
    float2 texelSize = float2(_TexelSizeX, _TexelSizeY);
    
    float4 priorAveragedUV = _ResultSampler.SampleLevel(linearClampSampler, uv , _MipIndex + 1);
    float2 averageDisplacedUV = AverageDisplacedUV(priorAveragedUV.xy, texelSize, _MipIndex);

    // float2 averageDisplacedUV = _WorldPosSampler.SampleLevel(linearClampSampler, uv, _MipIndex);
    
    _Result[id.xy] = float4(averageDisplacedUV.xy, 0, 1);
}
