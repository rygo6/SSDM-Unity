#pragma kernel FirstMip
#pragma kernel SubsequentMip
#pragma kernel FinalMip

int _MipIndex;
float _SizeX;
float _SizeY;
float _TexelSizeX;
float _TexelSizeY;
float4x4 invVP_ClipToWorld;
float4x4 VP_WorldToClip;
float4x4 invV_ObjectToWorld;
float4x4 V_WorldToObject;
Texture2D<float4> _DisplacedUVSampler;
Texture2D<float4> _ResultSampler;
SamplerState linearClampSampler;
SamplerState pointClampSampler;
RWTexture2D<float4> _Result;

// static const float2 offsets[4] = {
//     float2(0, 0),
//     float2(1, 1),
//     float2(1, 0),
//     float2(0, 1)
// };
// static const float2 offsets[4] = {
//     float2(0, 0),
//     float2(-1, -1),
//     float2(-1, 0),
//     float2(0, -1)
// };
static const float offsetCount = 4;
static const float2 offsets[] = {
    float2(-1, -1),
    float2(1, 1),
    float2(1, -1),
    float2(-1, 1)
};

inline float2 AverageQuadSample(float2 uv, float2 texelSize, int mipIndex, Texture2D<float4> displacedUVSampler)
{
    float2 averagedDisplacedNormalVector = 0;
    const int subsampleCount = 4;
    for (int subsample = 1; subsample < subsampleCount + 1; ++subsample)
    {
        for (int i = 0; i < offsetCount; ++i)
        {
            const float2 sampleTexelSize = texelSize * (1.0 / subsample);
            const float2 sampleUv = uv + (offsets[i] * sampleTexelSize);
            // const float4 displaceNormalVector = _WorldPosSampler.SampleLevel(linearClampSampler, sampleUv, 0); // seems better with lowest mip?
            float2 displaceNormalVector = displacedUVSampler.SampleLevel(linearClampSampler, sampleUv, mipIndex).xy;
            // displaceNormalVector = sampleUv <= texelSize ? 0 : displaceNormalVector;
            // displaceNormalVector = sampleUv >= 1.0 - texelSize ? 1: displaceNormalVector;
            averagedDisplacedNormalVector += displaceNormalVector.xy;
        }
    }    
    return averagedDisplacedNormalVector / (offsetCount * subsampleCount);
}

[numthreads(32, 32, 1)]
void FirstMip (uint3 id : SV_DispatchThreadID)
{
    float sizeX = 512 >> _MipIndex;
    float sizeY = 512 >> _MipIndex;
    float2 texelSize = float2(1.0 / sizeX, 1.0 / sizeY);
    float2 halfTexelSize = texelSize / 2.0;
    
    float2 uv = (float2)id.xy / float2(sizeX, sizeY);
    
    float2 averageDisplacedUV = AverageQuadSample(uv + halfTexelSize, texelSize * 1, _MipIndex, _DisplacedUVSampler);
    
    _Result[id.xy] = float4(averageDisplacedUV.xy, 0, 1);
}

[numthreads(32, 32, 1)]
void SubsequentMip(uint3 id : SV_DispatchThreadID)
{
    float sizeX = 512 >> _MipIndex;
    float sizeY = 512 >> _MipIndex;
    float2 texelSize = float2(1.0 / sizeX, 1.0 / sizeY);
    float2 halfTexelSize = texelSize / 2.0;
    
    float2 uv = (float2)id.xy / float2(sizeX, sizeY);
    
    // float4 priorAveragedUV = _ResultSampler.SampleLevel(linearClampSampler, uv + halfTexelSize, _MipIndex + 1);
    float2 priorAveragedUV = AverageQuadSample(uv + halfTexelSize, halfTexelSize, _MipIndex + 1, _ResultSampler);
    float2 averageDisplacedUV = AverageQuadSample(priorAveragedUV, texelSize * 1, _MipIndex, _DisplacedUVSampler);
    
    _Result[id.xy] = float4(averageDisplacedUV, 0, 1);
}

[numthreads(32, 32, 1)]
void FinalMip(uint3 id : SV_DispatchThreadID)
{
    float sizeX = 512;
    float sizeY = 512;
    float2 texelSize = float2(1.0 / sizeX, 1.0 / sizeY);
    float2 halfTexelSize = texelSize / 2.0;
    float2 uv = (float2)id.xy / float2(sizeX, sizeY);
    float4 priorAveragedUV = _ResultSampler.SampleLevel(linearClampSampler, uv + halfTexelSize, _MipIndex + 1);
    float2 displaceNormalVector = _DisplacedUVSampler.SampleLevel(linearClampSampler, priorAveragedUV, 0).xy;    
    _Result[id.xy] = float4(displaceNormalVector, 0, 1);
}
